#include<iostream>
#include<cstdio>
#include<cstdlib>
#define INTI_SIZE 1000
#define ADD_SIZE 100
#define OVERFLOW -1
#define OK 1
#define ERROR -2
using namespace std;
int map[1000][1000];
typedef struct xy
{
    int x;
    int y;
}xy;
typedef struct Sqstack
{
    xy *top;
    xy *base;
    int st_size;
}Sqstack;
int InitStack(Sqstack &s)
{
    s.base=(xy *)malloc(sizeof(xy)*INTI_SIZE*2);
    s.top=s.base;
    s.st_size=INTI_SIZE;
    return OK;
}
int Push(Sqstack &s,int x,int y)
{
    if ((s.top-s.base)>=s.st_size)
    {
        s.base=(xy *)realloc(s.base,sizeof(xy)*(ADD_SIZE+s.st_size)*2);
        s.st_size+=ADD_SIZE;
    }
    if (!s.base) exit(OVERFLOW);
    s.top->x=x;
    s.top->y=y;
    s.top++;
    return OK;
}
int GetTop(Sqstack &s,int &x,int &y)
{
    if (s.top==s.base) return ERROR;
    x=s.top->x;
    y=s.top->y;
    return OK;
}
int Pop(Sqstack &s,int &x,int &y)
{
    if (s.top==s.base) return ERROR;
    s.top--;
    x=s.top->x;
    y=s.top->y;
    return OK;
}
int StackLength(Sqstack s)
{
    return s.top-s.base;
}
int main()
{
    int i,j,n,m,NOWx,NOWy,x,y;
    Sqstack s;
    InitStack(s);
    scanf("%d%d",&n,&m);////input
    for (i=1;i<=n;++i)
        for (j=1;j<=m;++j)
            scanf("%d",&map[i][j]);
    for (j=1;j<=m;++j) {map[0][j]=1;map[n+1][j]=1;}
    for (i=1;i<=n;++i) {map[i][0]=1;map[i][m+1]=1;}
    if (map[1][1]==1) {cout << "Input Error" << endl;return 0;}
    Push(s,1,1);
    map[1][1]=1;
    NOWx=1;NOWy=1;
    while (OK)
    {
        if (NOWx==n&&NOWy==m)
        {
            while (StackLength(s))
            {
                Pop(s,x,y);
                cout << x <<" " << y <<endl;
            }
            break;
        }
        if (map[NOWx+1][NOWy]==0)
        {
            Push(s,NOWx+1,NOWy);
            ++NOWx;
            map[NOWx][NOWy]=1;
        }
        else if (map[NOWx-1][NOWy]==0)
        {
            Push(s,NOWx-1,NOWy);
            --NOWx;
            map[NOWx][NOWy]=1;
        }

        else if (map[NOWx][NOWy+1]==0)
        {
            Push(s,NOWx,NOWy+1);
            ++NOWy;
            map[NOWx][NOWy]=1;
        }
        else if (map[NOWx][NOWy-1]==0)
        {
            Push(s,NOWx,NOWy-1);
            --NOWy;
            map[NOWx][NOWy]=1;
        }
        else
        {
            Pop(s,x,y);
            NOWx=(s.top-1)->x;
            NOWy=(s.top-1)->y;
            map[NOWx][NOWy]=0;
        }
    }
    return 0;
}
